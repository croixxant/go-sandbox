// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
)

const addPostLikesCount = `-- name: AddPostLikesCount :exec
UPDATE posts
SET likes_count = likes_count + ?
WHERE id = ?
`

type AddPostLikesCountParams struct {
	Likes int32
	ID    int64
}

func (q *Queries) AddPostLikesCount(ctx context.Context, arg AddPostLikesCountParams) error {
	_, err := q.db.ExecContext(ctx, addPostLikesCount, arg.Likes, arg.ID)
	return err
}

const createPost = `-- name: CreatePost :execresult
INSERT INTO posts (
  user_id, body, likes_count
) VALUES (
  ?, ?, 0
)
`

type CreatePostParams struct {
	UserID int64
	Body   string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost, arg.UserID, arg.Body)
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, user_id, body, likes_count FROM posts
WHERE id = ?
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Body,
		&i.LikesCount,
	)
	return i, err
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT id, user_id, body, likes_count FROM posts
WHERE user_id = ?
`

func (q *Queries) GetUserPosts(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Body,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
